---
import type { MarkdownHeading } from 'astro'

interface Props {
	headings: MarkdownHeading[]
}

const { headings } = Astro.props

interface TOCHeading extends MarkdownHeading {
	children: MarkdownHeading[]
}

const toc: TOCHeading[] = []
let lastH2: TOCHeading | null = null

for (const heading of headings) {
	if (heading.depth === 2) {
		lastH2 = { ...heading, children: [] }
		toc.push(lastH2)
	} else if (heading.depth === 3 && lastH2) {
		lastH2.children.push(heading)
	}
}
---

{
	toc.length > 0 ? (
		<nav
			class="py-6 px-5 rounded-2xl shadow-sm border transition-colors
			bg-foreground/5 dark:bg-foreground-dark/10
			border-foreground/20 dark:border-foreground-dark/30
			text-foreground dark:text-foreground-dark
			backdrop-blur-sm"
		>
			<h2 class="text-2xl font-bold pb-3 mb-4 border-b border-foreground/20 dark:border-foreground-dark/30">
				En esta p√°gina
			</h2>
			<ul class="space-y-3">
				{toc.map((h2) => (
					<li>
						<a
							class="block text-lg font-medium text-foreground dark:text-foreground-dark hover:text-blue-600 dark:hover:text-blue-400 hover:underline underline-offset-4 transition-colors"
							href={`#${h2.slug}`}
						>
							{h2.text}
						</a>
						{h2.children.length > 0 && (
							<ul class="ml-4 mt-2 space-y-2 border-l-2 border-foreground/20 dark:border-foreground-dark/30 pl-4">
								{h2.children.map((h3) => (
									<li>
										<a
											class="block text-sm text-foreground/80 dark:text-foreground-dark/80 hover:text-blue-600 dark:hover:text-blue-400 hover:underline underline-offset-4 transition-colors"
											href={`#${h3.slug}`}
										>
											{h3.text}
										</a>
									</li>
								))}
							</ul>
						)}
					</li>
				))}
			</ul>
		</nav>
	) : (
		<div />
	)
}
